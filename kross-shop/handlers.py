import sqlite3

from aiogram import Bot, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from config import Kiber
from config import Kiber1
from config import Kiber2
from config import Kiber4
from config import Updatee
from config import Send
from config import Zakaz
from config import Tcodee
from config import Tcodee1
from keyboard import keyboard12, online, offers_add, adminpanel, under, offers_del, updater, reply
from main import dp


joinedFile = open("joined.txt", "r")
joinedUsers = set()
for line in joinedFile:
    joinedUsers.add(line.strip())
joinedFile.close()

con = sqlite3.connect("offers.db")
cursor = con.cursor()

n = 0

# --------------------------------------------
@dp.callback_query(F.data == 'info')
async def info(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await bot.send_message(callback.from_user.id,
                           text='–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≥–æ , —á—Ç–æ-–±—ã –≤–∞–º –¥—Ä—É–∑—å—è –±—ã–ª–æ —É–¥–æ–±–Ω–µ–µ —Å–º–æ—Ç—Ä–µ—Ç—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –≤ –Ω–∞—à–µ–º –¢–µ–ª–µ–≥—Ä–∞–º–º –ö–∞–Ω–∞–ª–µüëå\n\n–î–ª—è —Ç–æ–≥–æ , —á—Ç–æ-–±—ã –∑–∞–∫–∞–∑–∞—Ç—å –º–æ–¥–µ–ª—å –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º , –∞ —Ç–∞–∫ –∂–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –æ–Ω –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –±—ã—Å—Ç—Ä–µ–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑‚ÄºÔ∏è\n\n–î–æ—Å—Ç–∞–≤–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è :\n–ï–≤—Ä–æ–ø–æ—á—Ç–∞:2/4 –¥–Ω—è \n–ë–µ–ª–ø–æ—á—Ç–∞:2/4 –¥–Ω—è \n–ú–∏–Ω—Å–∫ , –∫—É—Ä—å–µ—Ä —Å –ø—Ä–∏–º–µ—Ä–∫–æ–π 15 —Ä—É–±–ª–µ–πüôå\n\n–ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ –≤—Å—é –æ–±—É–≤—å 31 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –¥–µ–Ω—å üî•\n\n–û–±–º–µ–Ω-–í–æ–∑–≤—Ä–∞—Ç –Ω–µ –Ω–æ—à–µ–Ω–Ω–æ–π –æ–±—É–≤–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 14 –¥–Ω–µ–πü§ù')


@dp.callback_query(F.data == 'get_code')
async def code(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await bot.send_message(callback.from_user.id,
                           text='üì≤–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –±–µ–∑ "+" –≤–Ω–∞—á–∞–ª–µ: 375331111111')
    await state.set_state(Tcodee1.name)


@dp.message(Tcodee1.name)
async def code(callback: CallbackQuery, state: FSMContext, bot: Bot):
    cursor.execute(f"SELECT * FROM code WHERE number={str(callback.text)}")
    for off in cursor.fetchall():
        await  bot.send_message(callback.from_user.id, f"–í–∞—à —Ç—Ä–µ–∫ –∫–æ–¥:   {off[2]}")
    if not callback.text in cursor.fetchall():
        await bot.send_message(callback.from_user.id, text='–ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')

    con.commit()


# --------------------------------------------
@dp.callback_query(F.data == 'tcode')
async def tcode(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await bot.send_message(callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –±–µ–∑ "+" –≤ –Ω–∞—á–∞–ª–µ')
    await state.set_state(Tcodee.name)


@dp.message(Tcodee.name)
async def tcode(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await state.update_data(num=callback.text)
    await bot.send_message(callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫ –∫–æ–¥')
    await state.set_state(Tcodee.name1)


@dp.message(Tcodee.name1)
async def tcode(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data1 = await state.get_data()
    cursor.execute(f"INSERT INTO code (number, trek) VALUES ({str(data1['num'])}, {str(callback.text)})")
    con.commit()
    await bot.send_message(callback.from_user.id, text='–î–æ–±–∞–≤–ª–µ–Ω–æ')
    await state.clear()


# -------------------------------------------
@dp.callback_query(F.data == 'update')
async def upd(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await bot.send_message(callback.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏—Ä–º—É', reply_markup=updater)


@dp.callback_query(F.data == 'nike_up')
async def upd(callback: CallbackQuery, state: FSMContext, bot: Bot):
    cursor.execute("SELECT * FROM nike")
    for off in cursor.fetchall():
        await  bot.send_message(callback.from_user.id, f"{off[0]} - {off[1]}")
    await bot.send_message(callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ id —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å')
    await state.set_state(Updatee.name)
    await state.update_data(firm='nike')
    con.commit()


@dp.callback_query(F.data == 'adidas_up')
async def upd(callback: CallbackQuery, state: FSMContext, bot: Bot):
    cursor.execute("SELECT * FROM adidas")
    for off in cursor.fetchall():
        await  bot.send_message(callback.from_user.id, f"{off[0]} - {off[1]}")
    await bot.send_message(callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ id —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å')
    await state.set_state(Updatee.name)
    await state.update_data(firm='adidas')
    con.commit()


@dp.callback_query(F.data == 'puma_up')
async def upd(callback: CallbackQuery, state: FSMContext, bot: Bot):
    cursor.execute("SELECT * FROM puma")
    for off in cursor.fetchall():
        await  bot.send_message(callback.from_user.id, f"{off[0]} - {off[1]}")
    await bot.send_message(callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ id —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å')
    await state.set_state(Updatee.name)
    await state.update_data(firm='puma')
    con.commit()


@dp.callback_query(F.data == 'balance_up')
async def upd(callback: CallbackQuery, state: FSMContext, bot: Bot):
    cursor.execute("SELECT * FROM balance")
    for off in cursor.fetchall():
        await  bot.send_message(callback.from_user.id, f"{off[0]} - {off[1]}")
    await bot.send_message(callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ id —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å')
    await state.set_state(Updatee.name)
    await state.update_data(firm='balance')
    con.commit()


@dp.callback_query(F.data == 'reebok_up')
async def upd(callback: CallbackQuery, state: FSMContext, bot: Bot):
    cursor.execute("SELECT * FROM reebok")
    for off in cursor.fetchall():
        await  bot.send_message(callback.from_user.id, f"{off[0]} - {off[1]}")
    await bot.send_message(callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ id —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å')
    await state.set_state(Updatee.name)
    await state.update_data(firm='reebok')
    con.commit()


@dp.callback_query(F.data == 'other_up')
async def upd(callback: CallbackQuery, state: FSMContext, bot: Bot):
    cursor.execute("SELECT * FROM other")
    for off in cursor.fetchall():
        await  bot.send_message(callback.from_user.id, f"{off[0]} - {off[1]}")
    await bot.send_message(callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ id —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å')
    await state.set_state(Updatee.name)
    await state.update_data(firm='other')
    con.commit()


@dp.message(Updatee.name)
async def upd(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await state.update_data(id=callback.text)
    await bot.send_message(callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã')
    await state.set_state(Updatee.name1)


@dp.message(Updatee.name1)
async def upd(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data1 = await state.get_data()
    cursor.execute(f'UPDATE {data1["firm"]} SET size ={str(callback.text)} WHERE id={str(data1["id"])}')
    con.commit()
    await bot.send_message(callback.from_user.id, text='–æ–±–Ω–æ–≤–ª–µ–Ω–æ')
    await state.clear()


# ------------------------------------------
@dp.callback_query(F.data == 'delete')
async def minus(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await bot.send_message(callback.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∫—É–¥–∞ —É–¥–∞–ª–∏—Ç—å', reply_markup=offers_del)


@dp.callback_query(F.data == 'nike_del')
async def minus(callback: CallbackQuery, state: FSMContext, bot: Bot):
    cursor.execute("SELECT * FROM nike")
    for off in cursor.fetchall():
        await  bot.send_message(callback.from_user.id, f"{off[0]} - {off[1]}")
    await bot.send_message(callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ id —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å')
    await state.set_state(Kiber4.name)
    await state.update_data(firm='nike')
    con.commit()


@dp.callback_query(F.data == 'adidas_del')
async def minus(callback: CallbackQuery, state: FSMContext, bot: Bot):
    cursor.execute("SELECT * FROM adidas")
    for off in cursor.fetchall():
        await  bot.send_message(callback.from_user.id, f"{off[0]} - {off[1]}")
    await bot.send_message(callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ id —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å')
    await state.set_state(Kiber4.name)
    await state.update_data(firm='adidas')
    con.commit()


@dp.callback_query(F.data == 'balance_del')
async def minus(callback: CallbackQuery, state: FSMContext, bot: Bot):
    cursor.execute("SELECT * FROM balance")
    for off in cursor.fetchall():
        await  bot.send_message(callback.from_user.id, f"{off[0]} - {off[1]}")
    await bot.send_message(callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ id —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å')
    await state.set_state(Kiber4.name)
    await state.update_data(firm='balance')
    con.commit()


@dp.callback_query(F.data == 'reebok_del')
async def minus(callback: CallbackQuery, state: FSMContext, bot: Bot):
    cursor.execute("SELECT * FROM reebok")
    for off in cursor.fetchall():
        await  bot.send_message(callback.from_user.id, f"{off[0]} - {off[1]}")
    await bot.send_message(callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ id —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å')
    await state.set_state(Kiber4.name)
    await state.update_data(firm='reebok')
    con.commit()


@dp.callback_query(F.data == 'puma_del')
async def minus(callback: CallbackQuery, state: FSMContext, bot: Bot):
    cursor.execute("SELECT * FROM puma")
    for off in cursor.fetchall():
        await  bot.send_message(callback.from_user.id, f"{off[0]} - {off[1]}")
    await bot.send_message(callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ id —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å')
    await state.set_state(Kiber4.name)
    await state.update_data(firm='puma')
    con.commit()


@dp.callback_query(F.data == 'other_del')
async def minus(callback: CallbackQuery, state: FSMContext, bot: Bot):
    cursor.execute("SELECT * FROM other")
    for off in cursor.fetchall():
        await  bot.send_message(callback.from_user.id, f"{off[0]} - {off[1]}")
    await bot.send_message(callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ id —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å')
    await state.set_state(Kiber4.name)
    await state.update_data(firm='other')
    con.commit()


@dp.message(Kiber4.name)
async def minus(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data1 = await state.get_data()
    cursor.execute(f'DELETE FROM {data1["firm"]} WHERE id = ?', (int(callback.text),))
    con.commit()

    await bot.send_message(callback.from_user.id, text='–£–¥–∞–ª–µ–Ω–æ')
    await state.clear()


# -----------------------------------------
@dp.callback_query(F.data == 'offersss')
async def offer(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await bot.send_message(callback.from_user.id,
                           '–≠—Ç–æ –Ω–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞\n\n–£ –≤–∞—Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–≥ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º\n\n')
    await bot.send_message(callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    await state.set_state(Zakaz.name)


@dp.message(Zakaz.name)
async def offer(callback: CallbackQuery, state: FSMContext, bot: Bot):
    if callback.text == '/start':
        await state.clear()
    else:
        await state.update_data(name=callback.text)
        await bot.send_message(callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –æ–±—É–≤–∏')
        await state.set_state(Zakaz.name1)


@dp.message(Zakaz.name1)
async def offer(callback: CallbackQuery, state: FSMContext, bot: Bot):
    wse = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19',
           '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30']
    if not str(callback.text) in wse:
        await bot.send_message(callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –æ–±—É–≤–∏')
        await state.set_state(Zakaz.name1)
    elif str(callback.text) in wse:
        await state.update_data(count=callback.text)
        await bot.send_message(callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä')
        await state.set_state(Zakaz.name3)


@dp.message(Zakaz.name3)
async def offer(callback: CallbackQuery, state: FSMContext, bot: Bot):
    s = ['30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47',
         '48', '49', '50']
    if not str(callback.text) in s:
        await bot.send_message(callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä')
        await state.set_state(Zakaz.name3)
    elif str(callback.text) in s:
        await state.update_data(size=callback.text)
        await bot.send_message(callback.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏', reply_markup=reply)
        await state.set_state(Zakaz.name4)


@dp.callback_query(F.data == 'bel')
async def offer(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await bot.send_message(callback.from_user.id,
                           text='–ó–∞–ø–∏—à–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ñ–æ—Ä–º–µ:\n1:–§–ò–û\n2:–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è \n3:–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ \n4:–ò–Ω–¥–µ–∫—Å')
    await state.set_state(Zakaz.name2)
    await state.update_data(p='–ë–µ–ª')


@dp.callback_query(F.data == 'euro')
async def offer(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await bot.send_message(callback.from_user.id,
                           text='–ó–∞–ø–∏—à–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ñ–æ—Ä–º–µ:\n1:–§–ò–û\n2:–ù–æ–º–µ—Ä –¢–µ–ª–µ—Ñ–æ–Ω–∞ \n3:–ê–¥—Ä–µ—Å –∏–ª–∏ –Ω–æ–º–µ—Ä –æ—Ç–¥–µ–ª–µ–Ω–∏—è –≤ –≥–æ—Ä–æ–¥–µ –ï–≤—Ä–æ–ø–æ—á—Ç—ã')
    await state.set_state(Zakaz.name2)
    await state.update_data(p='E–≤—Ä–æ')


@dp.message(Zakaz.name2)
async def offer(callback: CallbackQuery, state: FSMContext, bot: Bot):
    if callback.text == '/start':
        await state.clear()
    else:
        await bot.send_message(callback.from_user.id,
                               '–ñ–¥–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n\n–ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ –≤—Å—é –æ–±—É–≤—å 31 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –¥–µ–Ω—å üî•\n–û–±–º–µ–Ω-–í–æ–∑–≤—Ä–∞—Ç –Ω–µ –Ω–æ—à–µ–Ω–Ω–æ–π –æ–±—É–≤–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 14 –¥–Ω–µ–πü§ù')
        data1 = await state.get_data()
        await bot.send_message(chat_id=1488076193,
                               text=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {data1["name"]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data1["count"]}\n–†–∞–∑–º–µ—Ä: {data1["size"]}\n–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{callback.from_user.username}, {callback.from_user.full_name}\n\n{data1["p"]}–ø–æ—á—Ç–∞: \n{callback.text}')
        await state.clear()


# ----------------------------------------------
@dp.callback_query(F.data == 'home')
async def home(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await state.set_state(Kiber2.name)
    await bot.send_message(callback.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥', reply_markup=keyboard12)


@dp.callback_query(F.data == 'offerss')
async def offers(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await bot.send_message(callback.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥', reply_markup=online)


# ---------------------------------------------------------------------
@dp.callback_query(F.data == 'nike')
async def offers(callback: CallbackQuery, state: FSMContext, bot: Bot):
    global n
    n = 0
    cursor.execute(f'SELECT COUNT(*) FROM nike')
    total = cursor.fetchone()[0]
    a = n + 1
    await bot.send_message(callback.from_user.id, text=f'[{a} –∏–∑ {total}]')
    con.commit()
    cursor.execute("SELECT * FROM nike")
    off = cursor.fetchall()[n]
    await bot.send_photo(callback.from_user.id, photo=off[4])
    await bot.send_message(callback.from_user.id, text=f'{off[1]}          \n\n–¶–µ–Ω–∞: {off[2]}\n\n–†–∞–∑–º–µ—Ä—ã: {off[3]}',
                           reply_markup=under)
    con.commit()
    await state.set_state(Kiber1.name)
    await state.update_data(fir='nike')
    await state.update_data(n=0)


@dp.callback_query(F.data == 'adidas')
async def offers(callback: CallbackQuery, state: FSMContext, bot: Bot):
    global n
    n = 0
    cursor.execute(f'SELECT COUNT(*) FROM adidas')
    total = cursor.fetchone()[0]
    a = n + 1
    await bot.send_message(callback.from_user.id, text=f'[{a} –∏–∑ {total}]')
    con.commit()
    cursor.execute("SELECT * FROM adidas")
    off = cursor.fetchall()[n]
    await bot.send_photo(callback.from_user.id, photo=off[4])
    await bot.send_message(callback.from_user.id, text=f'{off[1]}          \n\n–¶–µ–Ω–∞: {off[2]}\n\n–†–∞–∑–º–µ—Ä—ã: {off[3]}',
                           reply_markup=under)
    con.commit()
    await state.set_state(Kiber1.name)
    await state.update_data(fir='adidas')
    await state.update_data(n=0)


@dp.callback_query(F.data == 'reebok')
async def offers(callback: CallbackQuery, state: FSMContext, bot: Bot):
    global n
    n = 0
    cursor.execute(f'SELECT COUNT(*) FROM reebok')
    total = cursor.fetchone()[0]
    a = n + 1
    await bot.send_message(callback.from_user.id, text=f'[{a} –∏–∑ {total}]')
    con.commit()
    cursor.execute("SELECT * FROM reebok")
    off = cursor.fetchall()[n]
    await bot.send_photo(callback.from_user.id, photo=off[4])
    await bot.send_message(callback.from_user.id, text=f'{off[1]}          \n\n–¶–µ–Ω–∞: {off[2]}\n\n–†–∞–∑–º–µ—Ä—ã: {off[3]}',
                           reply_markup=under)
    con.commit()
    await state.set_state(Kiber1.name)
    await state.update_data(fir='reebok')
    await state.update_data(n=0)


@dp.callback_query(F.data == 'puma')
async def offers(callback: CallbackQuery, state: FSMContext, bot: Bot):
    global n
    n = 0
    cursor.execute(f'SELECT COUNT(*) FROM reebok')
    total = cursor.fetchone()[0]
    a = n + 1
    await bot.send_message(callback.from_user.id, text=f'[{a} –∏–∑ {total}]')
    con.commit()
    cursor.execute("SELECT * FROM puma")
    off = cursor.fetchall()[n]
    await bot.send_photo(callback.from_user.id, photo=off[4])
    await bot.send_message(callback.from_user.id, text=f'{off[1]}          \n\n–¶–µ–Ω–∞: {off[2]}\n\n–†–∞–∑–º–µ—Ä—ã: {off[3]}',
                           reply_markup=under)
    con.commit()
    await state.set_state(Kiber1.name)
    await state.update_data(fir='puma')
    await state.update_data(n=0)


@dp.callback_query(F.data == 'balance')
async def offers(callback: CallbackQuery, state: FSMContext, bot: Bot):
    global n
    n = 0
    cursor.execute(f'SELECT COUNT(*) FROM balance')
    total = cursor.fetchone()[0]
    a = n + 1
    await bot.send_message(callback.from_user.id, text=f'[{a} –∏–∑ {total}]')
    con.commit()
    cursor.execute("SELECT * FROM balance")
    off = cursor.fetchall()[n]
    await bot.send_photo(callback.from_user.id, photo=off[4])
    await bot.send_message(callback.from_user.id, text=f'{off[1]}          \n\n–¶–µ–Ω–∞: {off[2]}\n\n–†–∞–∑–º–µ—Ä—ã: {off[3]}',
                           reply_markup=under)
    con.commit()
    await state.set_state(Kiber1.name)
    await state.update_data(fir='balance')
    await state.update_data(n=0)


@dp.callback_query(F.data == 'other')
async def offers(callback: CallbackQuery, state: FSMContext, bot: Bot):
    global n
    n = 0
    cursor.execute(f'SELECT COUNT(*) FROM other')
    total = cursor.fetchone()[0]
    await bot.send_message(callback.from_user.id, text=f'1 –∏–∑ {total}]')
    con.commit()
    cursor.execute("SELECT * FROM other")
    off = cursor.fetchall()[n]
    await bot.send_photo(callback.from_user.id, photo=off[4])
    await bot.send_message(callback.from_user.id, text=f'{off[1]}          \n\n–¶–µ–Ω–∞: {off[2]}\n\n–†–∞–∑–º–µ—Ä—ã: {off[3]}',
                           reply_markup=under)
    con.commit()
    await state.set_state(Kiber1.name)
    await state.update_data(fir='other')
    await state.update_data(n=0)


# ---------------------------------------------------------------------------------
@dp.callback_query(F.data == 'wpered')
async def offers(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data11 = await state.get_data()
    n1 = data11['n']
    n1 += 1

    cursor.execute(f'SELECT COUNT(*) FROM {data11["fir"]}')
    total = cursor.fetchone()[0]
    a = n1 + 1
    await bot.send_message(callback.from_user.id, text=f'[{a} –∏–∑ {total}]')
    con.commit()
    cursor.execute(f"SELECT * FROM {data11['fir']}")
    off = cursor.fetchall()[n1]
    await bot.send_photo(callback.from_user.id, photo=off[4])
    await bot.send_message(callback.from_user.id, text=f'{off[1]}          \n\n–¶–µ–Ω–∞: {off[2]}\n\n–†–∞–∑–º–µ—Ä—ã: {off[3]}',
                           reply_markup=under)
    con.commit()
    if a == total:
        await state.clear()
    if a < total:
        await state.set_state(Kiber1.name)
        await state.update_data(n=n1)


# @dp.callback_query(F.data == 'nazad' or Kiber1.name1)
# async def offers(callback: CallbackQuery, state: FSMContext, bot: Bot):
#     global n
#     n -= 1
#     data11 = await state.get_data()
#     cursor.execute(f'SELECT COUNT(*) FROM nike')
#     total = cursor.fetchone()[0]
#     a=n+1
#     await bot.send_message(callback.from_user.id,text=f'[{a} –∏–∑ {total}]')
#     con.commit()
#
#     cursor.execute(f"SELECT * FROM {data11['fir']}")
#     off = cursor.fetchall()[n]
#
#     await bot.send_photo(callback.from_user.id, photo=off[4])
#     await bot.send_message(callback.from_user.id, text=f'{off[1]}          \n\n–¶–µ–Ω–∞: {off[2]}\n\n–†–∞–∑–º–µ—Ä—ã: {off[3]}',
#                            reply_markup=under)
#     con.commit()
#     await state.set_state(Kiber1.name1)

@dp.message(Command('admin'))
async def admin(callback: CallbackQuery, state: FSMContext, bot: Bot):
    if callback.from_user.id == 1488076193 or callback.from_user.id == 681734057:
        await bot.send_message(callback.from_user.id, text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', reply_markup=adminpanel)


@dp.callback_query(F.data == 'plus')
async def plus(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await bot.send_message(callback.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å', reply_markup=offers_add)


@dp.callback_query(F.data == 'nike_add')
async def nike(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await bot.send_message(callback.from_user.id, text='–í–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    await state.set_state(Kiber.name)
    await state.update_data(firma='nike')


@dp.callback_query(F.data == 'adidas_add')
async def nike(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await bot.send_message(callback.from_user.id, text='–í–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    await state.set_state(Kiber.name)
    await state.update_data(firma='adidas')


@dp.callback_query(F.data == 'puma_add')
async def nike(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await bot.send_message(callback.from_user.id, text='–í–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    await state.set_state(Kiber.name)
    await state.update_data(firma='puma')


@dp.callback_query(F.data == 'balance_add')
async def nike(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await bot.send_message(callback.from_user.id, text='–í–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    await state.set_state(Kiber.name)
    await state.update_data(firma='balance')


@dp.callback_query(F.data == 'reebok_add')
async def nike(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await bot.send_message(callback.from_user.id, text='–í–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    await state.set_state(Kiber.name)
    await state.update_data(firma='reebok')


@dp.callback_query(F.data == 'other_add')
async def nike(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await bot.send_message(callback.from_user.id, text='–í–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    await state.set_state(Kiber.name)
    await state.update_data(firma='other')


@dp.message(Kiber.name)
async def zakaz(callback: CallbackQuery, state: FSMContext, bot: Bot):

    await state.update_data(name=callback.text)
    await bot.send_message(callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É')
    await state.set_state(Kiber.name1)



@dp.message(Kiber.name1)
async def zakaz(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await state.update_data(price=callback.text)
    await bot.send_message(callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã')
    await state.set_state(Kiber.name3)


@dp.message(Kiber.name3)
async def zakaz(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await state.update_data(size=callback.text)
    await bot.send_message(callback.from_user.id, text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é')
    await state.set_state(Kiber.name4)


@dp.message(Kiber.name4)
async def zakaz(message: Message, state: FSMContext, bot: Bot):
    data1 = await state.get_data()
    cursor.execute(f"INSERT INTO {data1['firma']} (name, price,size,link) VALUES (?, ?, ?,?)",
                   (data1['name'], data1['price'], data1['size'], str(message.photo[-1].file_id)))
    con.commit()
    await bot.send_message(message.from_user.id, text='–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ')
    await state.clear()


@dp.message(Command('start'))
async def music(callback: CallbackQuery, state: FSMContext, bot: Bot):
    if not str(callback.chat.id) in joinedUsers:
        joinedFile = open("joined.txt", "a")
        joinedFile.write(str(callback.chat.id) + "\n")
        joinedUsers.add(callback.chat.id)

    await bot.send_message(callback.from_user.id,
                           f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é @{callback.from_user.username}‚úåüèæ\n–†–∞–¥—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –Ω–∞—à –±–æ—Ç king kross‚§µÔ∏è\n\n–í—Å–µ –Ω–æ–≤–∏–Ω–∫–∏ –∏ —Ç—Ä–µ–Ω–¥—ã —ç—Ç–æ–≥–æ —Å–µ–∑–æ–Ω–∞ –∑–¥–µ—Å—å ü´∞üèΩ, –∏ —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ –≤—ã–±–∏—Ä–∞—Ç—å –∏ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –ª—é–±—É—é –ø–æ–Ω—Ä–∞–≤–∏–≤—à—É—é—Å—è –≤–∞–º –ø–∞—Ä—É üëü\n\n–†–∞–¥—É–π—Ç–µ —Å–µ–±—è –∏ —Å–≤–æ–∏—Ö –±–ª–∏–∑–∫–∏—Ö !\n–í–∞—à King kross üòà',
                           reply_markup=keyboard12)


@dp.message(Command('sendall'))
async def mess(callback: CallbackQuery, bot: Bot, state: FSMContext):
    if callback.from_user.id == 1488076193 or 681734057:
        await bot.send_message(callback.from_user.id, text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é')
        await state.set_state(Send.name)
    else:
        await bot.send_message(callback.from_user.id, text='–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É')


@dp.message(Send.name)
async def send(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(link=message.photo[-1].file_id)
    await bot.send_message(message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏')
    await state.set_state(Send.name2)


@dp.message(Send.name2)
async def send(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data1 = await state.get_data()
    for user in joinedUsers:
        await bot.send_photo(chat_id=user, photo=f'{data1["link"]}')
        await bot.send_message(chat_id=user, text=callback.text)
    await state.clear()


@dp.message(F.text)
async def error_msg(message: Message, bot: Bot, state: FSMContext):
    price = await state.get_data()
    print(price.get("price"))
    await bot.send_message(chat_id=message.from_user.id, text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É")
